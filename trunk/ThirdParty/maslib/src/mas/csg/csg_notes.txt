Notes:
Intersect BVTrees
Based on intersections, assign planes from opposite tree along which faces should be cut
If coplanar, need to cut along all sides
Go through and cut all faces

Go through each face, determine if inside/outside/coplanar with opposite mesh (keep track of coplanar parts)

KDTree, merge colocated vertices

triangulate mesh (choose one dominant mesh to keep faces in future procedure)

Then perform mesh boolean operation
- Union: remove faces inside the other mesh, coplanar keep one if normals consistent, remove both otherwise, all normals stay same
- Intersection: remove faces outside the other mesh, coplanar keep one if normals consistent, remove both otherwise, ?? all normals flip (or stay the same?)
- Subtraction: A-B, Keep faces A outside B, remove faces A inside B, keep faces B inside A, remove faces B outside A, coplanar keep one if not consistent, keep both otherwise.  Normals inside other mesh flip
- XOR: Keep all faces, normals inside other mesh flip, coplanar nothing

IsInside: closest face, then do ray cast, only need to find barycentric if hit another face
if direction to closest face same as normal, continue searching this ray,
otherwise flip direction, find a leaf BB, intersect with center of that face

VertexManager allow remove, which simply stores empty space to fill on next add... or look at shared_ptr